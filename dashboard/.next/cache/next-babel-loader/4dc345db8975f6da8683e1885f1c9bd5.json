{"ast":null,"code":"import _Array$isArray from \"@babel/runtime-corejs2/core-js/array/is-array\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nimport _Promise from \"@babel/runtime-corejs2/core-js/promise\";\nvar __jsx = React.createElement;\nimport React, { useEffect, useState } from 'react';\nimport Head from 'next/head';\nimport Link from 'next/link';\nimport { useRouter } from 'next/router';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Frame from 'react-frame-component';\nimport { withRedux } from '../lib/redux';\nimport Layout from '../components/layout';\nimport Meta from '../components/meta';\nimport Nav from '../components/nav';\nimport Sidebar from '../components/sidebar';\nimport { saveAuthData } from '../actions/auth';\nimport { saveProfileData } from '../actions/profile';\nimport { blockstackAPI } from '../api';\nimport stringify from 'fast-json-stable-stringify';\nimport anchorme from 'anchorme';\nimport handlebars from 'handlebars';\n\nconst readFileAsBuffer = file => {\n  const temporaryFileReader = new FileReader();\n  return new _Promise((resolve, reject) => {\n    temporaryFileReader.onload = () => {\n      resolve(temporaryFileReader.result);\n    };\n\n    temporaryFileReader.readAsArrayBuffer(file);\n  });\n};\n\nconst Dashboard = () => {\n  const dispatch = useDispatch();\n  const router = useRouter();\n  const {\n    0: name,\n    1: setName\n  } = useState('');\n  const {\n    0: description,\n    1: setDescription\n  } = useState('');\n  const {\n    0: avatarUrl,\n    1: setAvatarUrl\n  } = useState('');\n  const {\n    0: avatarFile,\n    1: setAvatarFile\n  } = useState('');\n  const {\n    0: accountList,\n    1: setAccountList\n  } = useState([]);\n  const {\n    0: themeList,\n    1: setThemeList\n  } = useState([]);\n  const {\n    0: theme,\n    1: setTheme\n  } = useState('');\n  const {\n    0: template,\n    1: setTemplate\n  } = useState('');\n  const authData = useSelector(state => state.auth.authData);\n  const profile = useSelector(state => state.profile);\n  const {\n    0: showProfileSidebar,\n    1: setShowProfileSidebar\n  } = useState(true);\n\n  const submit = async e => {\n    e.preventDefault();\n    const newProfile = {\n      name: name,\n      description: description,\n      avatarUrl: avatarUrl,\n      accountList: accountList,\n      theme: theme\n    };\n\n    if (avatarFile) {\n      const buff = await readFileAsBuffer(avatarFile);\n      const newAvatarUrl = await blockstackAPI.session.putFile('avatar.png', buff, {\n        encrypt: false\n      });\n      newProfile.avatarUrl = newAvatarUrl;\n    }\n\n    await blockstackAPI.session.putFile('profile.json', _JSON$stringify(newProfile), {\n      encrypt: false\n    });\n    dispatch(saveProfileData(newProfile));\n  };\n\n  useEffect(() => {\n    const checkAuthData = async () => {\n      if (blockstackAPI.session.isUserSignedIn()) {\n        if (!authData) {\n          const getAuthData = await blockstackAPI.session.loadUserData();\n          dispatch(saveAuthData(getAuthData));\n        }\n\n        if (_Object$keys(profile).length === 0) {\n          const getProfile = await blockstackAPI.session.getFile('profile.json', {\n            decrypt: false\n          });\n\n          if (getProfile) {\n            const parsedProfile = JSON.parse(getProfile);\n            dispatch(saveProfileData(parsedProfile));\n          } else {\n            // create new user profile\n            const avatarExist = authData.profile.image.find(img => img.name === 'avatar') || {}; // set default data\n\n            let name = authData.profile.name || '';\n            let description = authData.profile.description || '';\n            let avatarUrl = avatarExist.contentUrl || '';\n            let theme = {};\n            const newProfile = {\n              name: name,\n              description: description,\n              avatarUrl: avatarUrl,\n              theme: theme,\n              accountList: []\n            };\n            await blockstackAPI.session.putFile('profile.json', _JSON$stringify(newProfile), {\n              encrypt: false\n            });\n            dispatch(saveProfileData(newProfile));\n          }\n        }\n\n        const choosenTheme = await blockstackAPI.session.getFile('theme.json', {\n          decrypt: false\n        });\n\n        if (choosenTheme) {\n          setTheme(JSON.parse(choosenTheme));\n        }\n      } else {\n        router.replace('/login');\n      }\n    };\n\n    checkAuthData();\n\n    const fetchThemeList = () => {\n      setThemeList([{\n        name: 'Esox',\n        html: `\n        <style>\n          @import url(\"https://fonts.googleapis.com/css?family=Open+Sans&display=swap\");\n          body {\n            margin: 0;\n          }\n          .container {\n            min-width: 100vw;\n            min-height: 100vh;\n            font-family: \"Open Sans\", sans-serif;\n            color: #282828;\n            display: flex;\n            background: #f8f8f8;\n          }\n          .content {\n            display: flex;\n            max-width: 768px;\n            margin: auto;\n            width: 100%;\n          }\n          .content-img {\n            padding: 0 16px;\n            align-items: center;\n            justify-content: center;\n            display: flex;\n          }\n          .content-text {\n            padding: 0 16px;\n            padding-left: 32px;\n            justify-content: center;\n            display: flex;\n            flex-direction: column;\n          }\n          p.name {\n            font-size: 36px;\n            font-weight: 600;\n            margin: 0;\n            margin-bottom: 16px;\n          }\n          p.description {\n            font-size: 16px;\n            font-weight: 400;\n            margin: 0;\n            margin-bottom: 32px;\n            white-space: pre-wrap;\n            line-height: 1.5;\n          }\n          .avatar {\n            border: solid 3px #282828;\n            border-radius: 50%;\n          }\n          a {\n            color: blue;\n            text-decoration: none;\n          }\n          .social-list {\n            display: flex;\n          }\n          .social {\n            padding-right: 8px;\n          }\n        </style>\n        <div class=\"container\">\n          <div class=\"content\">\n            <div class=\"content-img\">\n              <img class=\"avatar\" height=\"200\" width=\"200\" src={{avatarUrl}} />\n            </div>\n            <div class=\"content-text\">\n              <p class=\"name\">{{name}}</p>\n              <p class=\"description\">{{{description}}}</p>\n              <div class=\"social-list\">\n                {{#each accountList}}\n                  <a class=\"social\" href=\"https://{{service}}.com/{{identifier}}\" target=\"_blank\">\n                    {{service}}\n                  </a>\n                {{/each}}\n              </div>\n            </div>\n          </div>\n        </div>\n        `\n      }, {\n        name: 'Test 2',\n        html: `<html><body>{{name}} 2</body></html>`\n      }, {\n        name: 'Test 3',\n        html: `<html><body>{{name}} 3</body></html>`\n      }]);\n    };\n\n    fetchThemeList();\n  }, []);\n  useEffect(() => {\n    if (profile.name) {\n      setName(profile.name);\n    }\n\n    if (profile.description) {\n      setDescription(profile.description);\n    }\n\n    if (_Array$isArray(profile.accountList)) {\n      const cloneAccountList = JSON.parse(_JSON$stringify(profile.accountList));\n      setAccountList(cloneAccountList);\n    }\n\n    if (profile.avatarUrl) {\n      setAvatarUrl(profile.avatarUrl);\n    }\n\n    if (profile.theme) {\n      const cloneTheme = JSON.parse(_JSON$stringify(profile.theme));\n      setTheme(cloneTheme);\n    }\n  }, [profile]);\n  useEffect(() => {\n    const currentData = JSON.parse(_JSON$stringify({\n      name: name,\n      description: description,\n      avatarUrl: avatarUrl,\n      accountList: accountList\n    }));\n\n    if (currentData.description) {\n      currentData.description = anchorme(currentData.description, {\n        attributes: [{\n          name: \"target\",\n          value: \"_blank\"\n        }]\n      });\n    }\n\n    if (theme) {\n      const compiled = handlebars.compile(theme.html)(currentData);\n      setTemplate(compiled);\n    }\n  }, [theme, name, description, avatarUrl, accountList]);\n\n  const toggleProfileSidebar = () => {\n    setShowProfileSidebar(!showProfileSidebar);\n  };\n\n  return __jsx(Layout, null, __jsx(Head, null, __jsx(\"title\", null, \"Dashboard | Paras\"), __jsx(\"link\", {\n    rel: \"icon\",\n    href: \"/favicon.ico\"\n  })), __jsx(Meta, null), __jsx(Nav, {\n    toggleProfileSidebar: toggleProfileSidebar\n  }), __jsx(Sidebar, {\n    name: name,\n    setName: setName,\n    description: description,\n    setDescription: setDescription,\n    accountList: accountList,\n    setAccountList: setAccountList,\n    avatarUrl: avatarUrl,\n    setAvatarUrl: setAvatarUrl,\n    avatarFile: avatarFile,\n    setAvatarFile: setAvatarFile,\n    theme: theme,\n    setTheme: setTheme,\n    themeList: themeList,\n    submit: submit,\n    showProfileSidebar: showProfileSidebar,\n    toggleProfileSidebar: toggleProfileSidebar\n  }), __jsx(Frame, {\n    className: \"w-screen\",\n    style: {\n      height: `calc(100vh - 2.5rem)`\n    }\n  }, __jsx(\"div\", {\n    dangerouslySetInnerHTML: {\n      __html: template\n    }\n  })));\n};\n\nexport default withRedux(Dashboard);","map":{"version":3,"sources":["/Users/riqi/Projects/persona-app/dashboard/pages/dash.js"],"names":["React","useEffect","useState","Head","Link","useRouter","useDispatch","useSelector","Frame","withRedux","Layout","Meta","Nav","Sidebar","saveAuthData","saveProfileData","blockstackAPI","stringify","anchorme","handlebars","readFileAsBuffer","file","temporaryFileReader","FileReader","resolve","reject","onload","result","readAsArrayBuffer","Dashboard","dispatch","router","name","setName","description","setDescription","avatarUrl","setAvatarUrl","avatarFile","setAvatarFile","accountList","setAccountList","themeList","setThemeList","theme","setTheme","template","setTemplate","authData","state","auth","profile","showProfileSidebar","setShowProfileSidebar","submit","e","preventDefault","newProfile","buff","newAvatarUrl","session","putFile","encrypt","checkAuthData","isUserSignedIn","getAuthData","loadUserData","length","getProfile","getFile","decrypt","parsedProfile","JSON","parse","avatarExist","image","find","img","contentUrl","choosenTheme","replace","fetchThemeList","html","cloneAccountList","cloneTheme","currentData","attributes","value","compiled","compile","toggleProfileSidebar","height","__html"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport Head from 'next/head'\nimport Link from 'next/link'\nimport { useRouter } from 'next/router'\nimport { useDispatch, useSelector } from 'react-redux'\nimport Frame from 'react-frame-component'\n\nimport { withRedux } from '../lib/redux'\nimport Layout from '../components/layout'\nimport Meta from '../components/meta'\nimport Nav from '../components/nav'\nimport Sidebar from '../components/sidebar'\n\nimport { saveAuthData } from '../actions/auth'\nimport { saveProfileData } from '../actions/profile'\nimport { blockstackAPI } from '../api'\nimport stringify from 'fast-json-stable-stringify'\nimport anchorme from 'anchorme'\nimport handlebars from 'handlebars'\n\nconst readFileAsBuffer = (file) => {\n  const temporaryFileReader = new FileReader()\n\n  return new Promise((resolve, reject) => {\n    temporaryFileReader.onload = () => {\n      resolve(temporaryFileReader.result)\n    }\n    temporaryFileReader.readAsArrayBuffer(file)\n  })\n}\n\nconst Dashboard = () => {\n  const dispatch = useDispatch()\n  const router = useRouter()\n  const [name, setName] = useState('')\n  const [description, setDescription] = useState('')\n  const [avatarUrl, setAvatarUrl] = useState('')\n  const [avatarFile, setAvatarFile] = useState('')\n  const [accountList, setAccountList] = useState([])\n  const [themeList, setThemeList] = useState([])\n  const [theme, setTheme] = useState('')\n  const [template, setTemplate] = useState('')\n\n  const authData = useSelector(state => state.auth.authData)\n  const profile = useSelector(state => state.profile)\n\n  const [showProfileSidebar, setShowProfileSidebar] = useState(true)\n\n  const submit = async (e) => {\n    e.preventDefault()\n\n    const newProfile = {\n      name: name,\n      description: description,\n      avatarUrl: avatarUrl,\n      accountList: accountList,\n      theme: theme\n    }\n    if(avatarFile) {\n      const buff = await readFileAsBuffer(avatarFile)\n      const newAvatarUrl = await blockstackAPI.session.putFile('avatar.png', buff, {\n        encrypt: false\n      })\n      newProfile.avatarUrl = newAvatarUrl\n    }\n\n    await blockstackAPI.session.putFile('profile.json', JSON.stringify(newProfile), {\n      encrypt: false\n    })\n\n    dispatch(saveProfileData(newProfile))\n  }\n\n  useEffect(() => {\n\t\tconst checkAuthData = async () => {\n      if(blockstackAPI.session.isUserSignedIn()) {\n        if(!authData) {\n          const getAuthData = await blockstackAPI.session.loadUserData()\n          dispatch(saveAuthData(getAuthData))\n        }\n\n        if(Object.keys(profile).length === 0) {\n          const getProfile = await blockstackAPI.session.getFile('profile.json', {\n            decrypt: false\n          })\n\n          if(getProfile) {\n            const parsedProfile = JSON.parse(getProfile)\n            dispatch(saveProfileData(parsedProfile))\n          }\n          else {\n            // create new user profile\n            const avatarExist = authData.profile.image.find(img => img.name === 'avatar') || {}\n            \n            // set default data\n            let name = authData.profile.name || ''\n            let description = authData.profile.description || ''\n            let avatarUrl = avatarExist.contentUrl || ''\n            let theme = {\n\n            }\n            \n            const newProfile = {\n              name: name,\n              description: description,\n              avatarUrl: avatarUrl,\n              theme: theme,\n              accountList: [],\n            }\n            await blockstackAPI.session.putFile('profile.json', JSON.stringify(newProfile), {\n              encrypt: false\n            })\n\n            dispatch(saveProfileData(newProfile))\n          }\n        }\n\n        const choosenTheme = await blockstackAPI.session.getFile('theme.json', {\n          decrypt: false\n        })\n        if(choosenTheme) {\n          setTheme(JSON.parse(choosenTheme))\n        }\n      }\n      else {\n        router.replace('/login')\n      }\n\t\t}\n    checkAuthData()\n    \n    const fetchThemeList = () => {\n      setThemeList([{\n        name: 'Esox',\n        html: `\n        <style>\n          @import url(\"https://fonts.googleapis.com/css?family=Open+Sans&display=swap\");\n          body {\n            margin: 0;\n          }\n          .container {\n            min-width: 100vw;\n            min-height: 100vh;\n            font-family: \"Open Sans\", sans-serif;\n            color: #282828;\n            display: flex;\n            background: #f8f8f8;\n          }\n          .content {\n            display: flex;\n            max-width: 768px;\n            margin: auto;\n            width: 100%;\n          }\n          .content-img {\n            padding: 0 16px;\n            align-items: center;\n            justify-content: center;\n            display: flex;\n          }\n          .content-text {\n            padding: 0 16px;\n            padding-left: 32px;\n            justify-content: center;\n            display: flex;\n            flex-direction: column;\n          }\n          p.name {\n            font-size: 36px;\n            font-weight: 600;\n            margin: 0;\n            margin-bottom: 16px;\n          }\n          p.description {\n            font-size: 16px;\n            font-weight: 400;\n            margin: 0;\n            margin-bottom: 32px;\n            white-space: pre-wrap;\n            line-height: 1.5;\n          }\n          .avatar {\n            border: solid 3px #282828;\n            border-radius: 50%;\n          }\n          a {\n            color: blue;\n            text-decoration: none;\n          }\n          .social-list {\n            display: flex;\n          }\n          .social {\n            padding-right: 8px;\n          }\n        </style>\n        <div class=\"container\">\n          <div class=\"content\">\n            <div class=\"content-img\">\n              <img class=\"avatar\" height=\"200\" width=\"200\" src={{avatarUrl}} />\n            </div>\n            <div class=\"content-text\">\n              <p class=\"name\">{{name}}</p>\n              <p class=\"description\">{{{description}}}</p>\n              <div class=\"social-list\">\n                {{#each accountList}}\n                  <a class=\"social\" href=\"https://{{service}}.com/{{identifier}}\" target=\"_blank\">\n                    {{service}}\n                  </a>\n                {{/each}}\n              </div>\n            </div>\n          </div>\n        </div>\n        `\n      }, {\n        name: 'Test 2',\n        html: `<html><body>{{name}} 2</body></html>`\n      }, {\n        name: 'Test 3',\n        html: `<html><body>{{name}} 3</body></html>`\n      }])\n    }\n    fetchThemeList()\n  }, [])\n\n  useEffect(() => {\n    if(profile.name) {\n      setName(profile.name)\n    }\n    if(profile.description) {\n      setDescription(profile.description)\n    }\n    if(Array.isArray(profile.accountList)) {\n      const cloneAccountList = JSON.parse(JSON.stringify(profile.accountList))\n      setAccountList(cloneAccountList)\n    }\n    if(profile.avatarUrl) {\n      setAvatarUrl(profile.avatarUrl)\n    }\n    if(profile.theme) {\n      const cloneTheme = JSON.parse(JSON.stringify(profile.theme))\n      setTheme(cloneTheme)\n    }\n  }, [profile])\n\n  useEffect(() => {\n    const currentData = JSON.parse(JSON.stringify({\n      name: name,\n      description: description,\n      avatarUrl: avatarUrl,\n      accountList: accountList\n    }))\n    if(currentData.description) {\n      currentData.description = anchorme(currentData.description, {\n        attributes: [\n          {\n            name:\"target\",\n            value:\"_blank\"\n          }\n        ]\n      })\n    }\n  \n    if(theme) {\n      const compiled = handlebars.compile(theme.html)(currentData)\n      setTemplate(compiled)\n    }\n  }, [theme, name, description, avatarUrl, accountList])\n\n  const toggleProfileSidebar = () => {\n    setShowProfileSidebar(!showProfileSidebar)\n  }\n\n  return (\n    <Layout>\n      <Head>\n        <title>Dashboard | Paras</title>\n        <link rel='icon' href='/favicon.ico' />\n      </Head>\n\n      <Meta />\n\n      <Nav toggleProfileSidebar={toggleProfileSidebar} />\n\n      <Sidebar \n        name={name}\n        setName={setName} \n        description={description}\n        setDescription={setDescription} \n        accountList={accountList}\n        setAccountList={setAccountList}\n        avatarUrl={avatarUrl}\n        setAvatarUrl={setAvatarUrl}\n        avatarFile={avatarFile}\n        setAvatarFile={setAvatarFile}  \n        theme={theme}\n        setTheme={setTheme}\n        themeList={themeList}\n        submit={submit}\n        showProfileSidebar={showProfileSidebar}\n        toggleProfileSidebar={toggleProfileSidebar}\n      />\n\n      <Frame className=\"w-screen\" style={{\n        height: `calc(100vh - 2.5rem)`\n      }}>\n        <div dangerouslySetInnerHTML={{\n          __html: template\n        }}></div>\n      </Frame>\n    </Layout>\n  )\n}\n\nexport default withRedux(Dashboard)"]},"metadata":{},"sourceType":"module"}