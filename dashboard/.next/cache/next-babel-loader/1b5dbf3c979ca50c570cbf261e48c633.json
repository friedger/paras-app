{"ast":null,"code":"import * as blockstack from 'blockstack';\nimport axios from 'axios';\nimport uuidv4 from 'uuid/v4';\nimport NodeRSA from 'node-rsa';\nimport stringify from 'fast-json-stable-stringify';\nimport sha256 from 'js-sha256';\n\nclass BlockstackAPI {\n  constructor() {\n    this.appConfig = new blockstack.AppConfig(['email', 'store_write', 'publish_data'], 'http://localhost:4000', '/login');\n    this.default = blockstack;\n    this.session = new blockstack.UserSession({\n      appConfig: this.appConfig\n    });\n  }\n\n}\n\nconst _signCredential = async (message, privateKey) => {\n  const msg = stringify(message);\n  const hashedMsg = sha256(msg);\n  const key = new NodeRSA(privateKey);\n  const signedMsg = key.sign(hashedMsg, 'hex', 'utf8');\n  const splitSignedMsg = signedMsg.length / 2;\n  const leftSignedMsg = signedMsg.substring(0, splitSignedMsg);\n  const rightSignedMsg = signedMsg.substring(splitSignedMsg);\n  return {\n    left: {\n      hash: leftSignedMsg\n    },\n    right: {\n      hash: rightSignedMsg\n    }\n  }; // const publicKey = new NodeRSA(currentOrg.publicKey)\n  // const verify = publicKey.verify(hashedMsg, leftSignedMsg + rightSignedMsg, 'utf8', 'hex')\n  // console.log(verify)\n};\n\nclass CredentialAPI {\n  async create(credential, privateKey) {\n    try {\n      const signature = await _signCredential(credential, privateKey);\n      const input = {\n        version: 'degree/v1',\n        uid: uuidv4(),\n        credential: credential,\n        signature: signature\n      };\n      const res = await axios.post('http://localhost:8080/v1/certificates', input);\n      console.log(res.data);\n    } catch (err) {\n      console.log(err);\n    }\n  }\n\n}\n\nexport const blockstackAPI = new BlockstackAPI();\nexport const credentialAPI = new CredentialAPI();","map":{"version":3,"sources":["/Users/riqi/Projects/persona-app/dashboard/api/index.js"],"names":["blockstack","axios","uuidv4","NodeRSA","stringify","sha256","BlockstackAPI","constructor","appConfig","AppConfig","default","session","UserSession","_signCredential","message","privateKey","msg","hashedMsg","key","signedMsg","sign","splitSignedMsg","length","leftSignedMsg","substring","rightSignedMsg","left","hash","right","CredentialAPI","create","credential","signature","input","version","uid","res","post","console","log","data","err","blockstackAPI","credentialAPI"],"mappings":"AAAA,OAAO,KAAKA,UAAZ,MAA4B,YAA5B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,SAAnB;AACA,OAAOC,OAAP,MAAoB,UAApB;AACA,OAAOC,SAAP,MAAsB,4BAAtB;AACA,OAAOC,MAAP,MAAmB,WAAnB;;AAEA,MAAMC,aAAN,CAAoB;AACnBC,EAAAA,WAAW,GAAG;AACb,SAAKC,SAAL,GAAiB,IAAIR,UAAU,CAACS,SAAf,CAAyB,CAAC,OAAD,EAAU,aAAV,EAAyB,cAAzB,CAAzB,EAAmE,uBAAnE,EAA4F,QAA5F,CAAjB;AACA,SAAKC,OAAL,GAAeV,UAAf;AACA,SAAKW,OAAL,GAAe,IAAIX,UAAU,CAACY,WAAf,CAA2B;AACzCJ,MAAAA,SAAS,EAAE,KAAKA;AADyB,KAA3B,CAAf;AAGA;;AAPkB;;AAUpB,MAAMK,eAAe,GAAG,OAAOC,OAAP,EAAgBC,UAAhB,KAA+B;AACtD,QAAMC,GAAG,GAAGZ,SAAS,CAACU,OAAD,CAArB;AACA,QAAMG,SAAS,GAAGZ,MAAM,CAACW,GAAD,CAAxB;AAEA,QAAME,GAAG,GAAG,IAAIf,OAAJ,CAAYY,UAAZ,CAAZ;AACA,QAAMI,SAAS,GAAGD,GAAG,CAACE,IAAJ,CAASH,SAAT,EAAoB,KAApB,EAA2B,MAA3B,CAAlB;AACA,QAAMI,cAAc,GAAGF,SAAS,CAACG,MAAV,GAAiB,CAAxC;AACA,QAAMC,aAAa,GAAGJ,SAAS,CAACK,SAAV,CAAoB,CAApB,EAAuBH,cAAvB,CAAtB;AACA,QAAMI,cAAc,GAAGN,SAAS,CAACK,SAAV,CAAoBH,cAApB,CAAvB;AAEA,SAAO;AACNK,IAAAA,IAAI,EAAE;AACLC,MAAAA,IAAI,EAAEJ;AADD,KADA;AAINK,IAAAA,KAAK,EAAE;AACND,MAAAA,IAAI,EAAEF;AADA;AAJD,GAAP,CAVsD,CAmBtD;AACA;AACA;AACA,CAtBD;;AAwBA,MAAMI,aAAN,CAAoB;AACnB,QAAMC,MAAN,CAAaC,UAAb,EAAyBhB,UAAzB,EAAqC;AACpC,QAAI;AACH,YAAMiB,SAAS,GAAG,MAAMnB,eAAe,CAACkB,UAAD,EAAahB,UAAb,CAAvC;AAEA,YAAMkB,KAAK,GAAG;AACbC,QAAAA,OAAO,EAAE,WADI;AAEbC,QAAAA,GAAG,EAAEjC,MAAM,EAFE;AAGb6B,QAAAA,UAAU,EAAEA,UAHC;AAIbC,QAAAA,SAAS,EAAEA;AAJE,OAAd;AAOA,YAAMI,GAAG,GAAG,MAAMnC,KAAK,CAACoC,IAAN,CAAW,uCAAX,EAAoDJ,KAApD,CAAlB;AACAK,MAAAA,OAAO,CAACC,GAAR,CAAYH,GAAG,CAACI,IAAhB;AACA,KAZD,CAYE,OAAOC,GAAP,EAAY;AACbH,MAAAA,OAAO,CAACC,GAAR,CAAYE,GAAZ;AACA;AACD;;AAjBkB;;AAoBpB,OAAO,MAAMC,aAAa,GAAG,IAAIpC,aAAJ,EAAtB;AACP,OAAO,MAAMqC,aAAa,GAAG,IAAId,aAAJ,EAAtB","sourcesContent":["import * as blockstack from 'blockstack'\nimport axios from 'axios'\nimport uuidv4 from 'uuid/v4'\nimport NodeRSA from 'node-rsa'\nimport stringify from 'fast-json-stable-stringify'\nimport sha256 from 'js-sha256'\n\nclass BlockstackAPI {\n\tconstructor() {\n\t\tthis.appConfig = new blockstack.AppConfig(['email', 'store_write', 'publish_data'], 'http://localhost:4000', '/login')\n\t\tthis.default = blockstack\n\t\tthis.session = new blockstack.UserSession({\n\t\t\tappConfig: this.appConfig\n\t\t})\n\t}\n}\n\nconst _signCredential = async (message, privateKey) => {\n\tconst msg = stringify(message)\n\tconst hashedMsg = sha256(msg)\n\n\tconst key = new NodeRSA(privateKey)\n\tconst signedMsg = key.sign(hashedMsg, 'hex', 'utf8')\n\tconst splitSignedMsg = signedMsg.length/2\n\tconst leftSignedMsg = signedMsg.substring(0, splitSignedMsg)\n\tconst rightSignedMsg = signedMsg.substring(splitSignedMsg)\n\t\n\treturn {\n\t\tleft: {\n\t\t\thash: leftSignedMsg\n\t\t},\n\t\tright: {\n\t\t\thash: rightSignedMsg\n\t\t}\n\t}\n\n\t// const publicKey = new NodeRSA(currentOrg.publicKey)\n\t// const verify = publicKey.verify(hashedMsg, leftSignedMsg + rightSignedMsg, 'utf8', 'hex')\n\t// console.log(verify)\n}\n\nclass CredentialAPI {\n\tasync create(credential, privateKey) {\n\t\ttry {\n\t\t\tconst signature = await _signCredential(credential, privateKey)\n\n\t\t\tconst input = {\n\t\t\t\tversion: 'degree/v1',\n\t\t\t\tuid: uuidv4(),\n\t\t\t\tcredential: credential,\n\t\t\t\tsignature: signature\n\t\t\t}\n\n\t\t\tconst res = await axios.post('http://localhost:8080/v1/certificates', input)\n\t\t\tconsole.log(res.data)\t\n\t\t} catch (err) {\n\t\t\tconsole.log(err)\n\t\t}\n\t}\n}\n\nexport const blockstackAPI = new BlockstackAPI()\nexport const credentialAPI = new CredentialAPI()"]},"metadata":{},"sourceType":"module"}