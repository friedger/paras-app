{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nvar __jsx = React.createElement;\nimport React, { useEffect, useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport Head from 'next/head';\nimport { useRouter } from 'next/router';\nimport { withRedux } from '../lib/redux';\nimport { saveAuthData } from '../actions/auth';\nimport { blockstackAPI } from '../api';\nimport { User } from 'radiks';\nimport Meta from '../components/meta';\nimport Layout from '../components/layout';\nimport Login from '../components/login';\nimport LandingNav from '../components/landingNav';\n\nvar LoginPage = function LoginPage() {\n  var dispatch = useDispatch();\n  var router = useRouter();\n\n  var _useState = useState(''),\n      loginState = _useState[0],\n      setLoginState = _useState[1];\n\n  useEffect(function () {\n    var checkAuthData =\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        var authData, _authData;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!blockstackAPI.session.isUserSignedIn()) {\n                  _context.next = 9;\n                  break;\n                }\n\n                setLoginState('pending');\n                authData = blockstackAPI.session.loadUserData();\n                _context.next = 5;\n                return User.createWithCurrentUser();\n\n              case 5:\n                dispatch(saveAuthData(authData));\n                router.push('/dash');\n                _context.next = 18;\n                break;\n\n              case 9:\n                if (!blockstackAPI.session.isSignInPending()) {\n                  _context.next = 18;\n                  break;\n                }\n\n                setLoginState('pending');\n                _context.next = 13;\n                return blockstackAPI.session.handlePendingSignIn();\n\n              case 13:\n                _authData = _context.sent;\n                _context.next = 16;\n                return User.createWithCurrentUser();\n\n              case 16:\n                dispatch(saveAuthData(_authData));\n                router.push('/dash');\n\n              case 18:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function checkAuthData() {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    checkAuthData();\n  }, []);\n  return __jsx(Layout, null, __jsx(Head, null, __jsx(\"title\", null, \"Login | Paras\")), __jsx(Meta, null), __jsx(LandingNav, null), __jsx(Login, {\n    loginState: loginState\n  }));\n};\n\nexport default withRedux(LoginPage);","map":null,"metadata":{},"sourceType":"module"}