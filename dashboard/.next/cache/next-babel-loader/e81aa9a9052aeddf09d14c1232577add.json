{"ast":null,"code":"import _Array$isArray from \"@babel/runtime-corejs2/core-js/array/is-array\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _Promise from \"@babel/runtime-corejs2/core-js/promise\";\nvar __jsx = React.createElement;\nimport React, { useEffect, useState } from 'react';\nimport Head from 'next/head';\nimport Link from 'next/link';\nimport { useRouter } from 'next/router';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Frame from 'react-frame-component';\nimport { withRedux } from '../lib/redux';\nimport Layout from '../components/layout';\nimport Meta from '../components/meta';\nimport Nav from '../components/nav';\nimport Sidebar from '../components/sidebar';\nimport { saveAuthData } from '../actions/auth';\nimport { saveProfileData } from '../actions/profile';\nimport { blockstackAPI } from '../api';\nimport stringify from 'fast-json-stable-stringify';\nimport anchorme from 'anchorme';\nimport handlebars from 'handlebars';\n\nvar readFileAsBuffer = function readFileAsBuffer(file) {\n  var temporaryFileReader = new FileReader();\n  return new _Promise(function (resolve, reject) {\n    temporaryFileReader.onload = function () {\n      resolve(temporaryFileReader.result);\n    };\n\n    temporaryFileReader.readAsArrayBuffer(file);\n  });\n};\n\nvar Dashboard = function Dashboard() {\n  var dispatch = useDispatch();\n  var router = useRouter();\n\n  var _useState = useState(''),\n      name = _useState[0],\n      setName = _useState[1];\n\n  var _useState2 = useState(''),\n      description = _useState2[0],\n      setDescription = _useState2[1];\n\n  var _useState3 = useState(''),\n      avatarUrl = _useState3[0],\n      setAvatarUrl = _useState3[1];\n\n  var _useState4 = useState(''),\n      avatarFile = _useState4[0],\n      setAvatarFile = _useState4[1];\n\n  var _useState5 = useState([]),\n      accountList = _useState5[0],\n      setAccountList = _useState5[1];\n\n  var _useState6 = useState([]),\n      themeList = _useState6[0],\n      setThemeList = _useState6[1];\n\n  var _useState7 = useState(''),\n      theme = _useState7[0],\n      setTheme = _useState7[1];\n\n  var _useState8 = useState(''),\n      template = _useState8[0],\n      setTemplate = _useState8[1];\n\n  var authData = useSelector(function (state) {\n    return state.auth.authData;\n  });\n  var profile = useSelector(function (state) {\n    return state.profile;\n  });\n\n  var _useState9 = useState(true),\n      showProfileSidebar = _useState9[0],\n      setShowProfileSidebar = _useState9[1];\n\n  var submit =\n  /*#__PURE__*/\n  function () {\n    var _ref = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee(e) {\n      var newProfile, buff, newAvatarUrl;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              e.preventDefault();\n              newProfile = {\n                name: name,\n                description: description,\n                avatarUrl: avatarUrl,\n                accountList: accountList,\n                theme: theme\n              };\n\n              if (!avatarFile) {\n                _context.next = 10;\n                break;\n              }\n\n              _context.next = 5;\n              return readFileAsBuffer(avatarFile);\n\n            case 5:\n              buff = _context.sent;\n              _context.next = 8;\n              return blockstackAPI.session.putFile('avatar.png', buff, {\n                encrypt: false\n              });\n\n            case 8:\n              newAvatarUrl = _context.sent;\n              newProfile.avatarUrl = newAvatarUrl;\n\n            case 10:\n              _context.next = 12;\n              return blockstackAPI.session.putFile('profile.json', _JSON$stringify(newProfile), {\n                encrypt: false\n              });\n\n            case 12:\n              dispatch(saveProfileData(newProfile));\n\n            case 13:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function submit(_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  useEffect(function () {\n    var checkAuthData =\n    /*#__PURE__*/\n    function () {\n      var _ref2 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2() {\n        var getAuthData, getProfile, parsedProfile, avatarExist, _name, _description, _avatarUrl, _theme, newProfile, choosenTheme;\n\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (!blockstackAPI.session.isUserSignedIn()) {\n                  _context2.next = 30;\n                  break;\n                }\n\n                if (authData) {\n                  _context2.next = 6;\n                  break;\n                }\n\n                _context2.next = 4;\n                return blockstackAPI.session.loadUserData();\n\n              case 4:\n                getAuthData = _context2.sent;\n                dispatch(saveAuthData(getAuthData));\n\n              case 6:\n                if (!(_Object$keys(profile).length === 0)) {\n                  _context2.next = 24;\n                  break;\n                }\n\n                _context2.next = 9;\n                return blockstackAPI.session.getFile('profile.json', {\n                  decrypt: false\n                });\n\n              case 9:\n                getProfile = _context2.sent;\n\n                if (!getProfile) {\n                  _context2.next = 15;\n                  break;\n                }\n\n                parsedProfile = JSON.parse(getProfile);\n                dispatch(saveProfileData(parsedProfile));\n                _context2.next = 24;\n                break;\n\n              case 15:\n                // create new user profile\n                avatarExist = authData.profile.image.find(function (img) {\n                  return img.name === 'avatar';\n                }) || {}; // set default data\n\n                _name = authData.profile.name || '';\n                _description = authData.profile.description || '';\n                _avatarUrl = avatarExist.contentUrl || '';\n                _theme = {};\n                newProfile = {\n                  name: _name,\n                  description: _description,\n                  avatarUrl: _avatarUrl,\n                  theme: _theme,\n                  accountList: []\n                };\n                _context2.next = 23;\n                return blockstackAPI.session.putFile('profile.json', _JSON$stringify(newProfile), {\n                  encrypt: false\n                });\n\n              case 23:\n                dispatch(saveProfileData(newProfile));\n\n              case 24:\n                _context2.next = 26;\n                return blockstackAPI.session.getFile('theme.json', {\n                  decrypt: false\n                });\n\n              case 26:\n                choosenTheme = _context2.sent;\n\n                if (choosenTheme) {\n                  setTheme(JSON.parse(choosenTheme));\n                }\n\n                _context2.next = 31;\n                break;\n\n              case 30:\n                router.replace('/login');\n\n              case 31:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      return function checkAuthData() {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n\n    checkAuthData();\n\n    var fetchThemeList = function fetchThemeList() {\n      setThemeList([{\n        name: 'Esox',\n        html: \"\\n        <style>\\n          @import url(\\\"https://fonts.googleapis.com/css?family=Open+Sans&display=swap\\\");\\n          body {\\n            margin: 0;\\n          }\\n          .container {\\n            min-width: 100vw;\\n            min-height: 100vh;\\n            font-family: \\\"Open Sans\\\", sans-serif;\\n            color: #282828;\\n            display: flex;\\n            background: #f8f8f8;\\n          }\\n          .content {\\n            display: flex;\\n            max-width: 768px;\\n            margin: auto;\\n            width: 100%;\\n          }\\n          .content-img {\\n            padding: 0 16px;\\n            align-items: center;\\n            justify-content: center;\\n            display: flex;\\n          }\\n          .content-text {\\n            padding: 0 16px;\\n            padding-left: 32px;\\n            justify-content: center;\\n            display: flex;\\n            flex-direction: column;\\n          }\\n          p.name {\\n            font-size: 36px;\\n            font-weight: 600;\\n            margin: 0;\\n            margin-bottom: 16px;\\n          }\\n          p.description {\\n            font-size: 16px;\\n            font-weight: 400;\\n            margin: 0;\\n            margin-bottom: 32px;\\n            white-space: pre-wrap;\\n            line-height: 1.5;\\n          }\\n          .avatar {\\n            border: solid 3px #282828;\\n            border-radius: 50%;\\n          }\\n          a {\\n            color: blue;\\n            text-decoration: none;\\n          }\\n          .social-list {\\n            display: flex;\\n          }\\n          .social {\\n            padding-right: 8px;\\n          }\\n        </style>\\n        <div class=\\\"container\\\">\\n          <div class=\\\"content\\\">\\n            <div class=\\\"content-img\\\">\\n              <img class=\\\"avatar\\\" height=\\\"200\\\" width=\\\"200\\\" src={{avatarUrl}} />\\n            </div>\\n            <div class=\\\"content-text\\\">\\n              <p class=\\\"name\\\">{{name}}</p>\\n              <p class=\\\"description\\\">{{{description}}}</p>\\n              <div class=\\\"social-list\\\">\\n                {{#each accountList}}\\n                  <a class=\\\"social\\\" href=\\\"https://{{service}}.com/{{identifier}}\\\" target=\\\"_blank\\\">\\n                    {{service}}\\n                  </a>\\n                {{/each}}\\n              </div>\\n            </div>\\n          </div>\\n        </div>\\n        \"\n      }, {\n        name: 'Test 2',\n        html: \"<html><body>{{name}} 2</body></html>\"\n      }, {\n        name: 'Test 3',\n        html: \"<html><body>{{name}} 3</body></html>\"\n      }]);\n    };\n\n    fetchThemeList();\n  }, []);\n  useEffect(function () {\n    if (profile.name) {\n      setName(profile.name);\n    }\n\n    if (profile.description) {\n      setDescription(profile.description);\n    }\n\n    if (_Array$isArray(profile.accountList)) {\n      var cloneAccountList = JSON.parse(_JSON$stringify(profile.accountList));\n      setAccountList(cloneAccountList);\n    }\n\n    if (profile.avatarUrl) {\n      setAvatarUrl(profile.avatarUrl);\n    }\n\n    if (profile.theme) {\n      var cloneTheme = JSON.parse(_JSON$stringify(profile.theme));\n      setTheme(cloneTheme);\n    }\n  }, [profile]);\n  useEffect(function () {\n    var currentData = JSON.parse(_JSON$stringify({\n      name: name,\n      description: description,\n      avatarUrl: avatarUrl,\n      accountList: accountList\n    }));\n\n    if (currentData.description) {\n      currentData.description = anchorme(currentData.description, {\n        attributes: [{\n          name: \"target\",\n          value: \"_blank\"\n        }]\n      });\n    }\n\n    if (theme) {\n      var compiled = handlebars.compile(theme.html)(currentData);\n      setTemplate(compiled);\n    }\n  }, [theme, name, description, avatarUrl, accountList]);\n\n  var toggleProfileSidebar = function toggleProfileSidebar() {\n    setShowProfileSidebar(!showProfileSidebar);\n  };\n\n  return __jsx(Layout, null, __jsx(Head, null, __jsx(\"title\", null, \"Dashboard | Paras\"), __jsx(\"link\", {\n    rel: \"icon\",\n    href: \"/favicon.ico\"\n  })), __jsx(Meta, null), __jsx(Nav, {\n    toggleProfileSidebar: toggleProfileSidebar\n  }), __jsx(Sidebar, {\n    name: name,\n    setName: setName,\n    description: description,\n    setDescription: setDescription,\n    accountList: accountList,\n    setAccountList: setAccountList,\n    avatarUrl: avatarUrl,\n    setAvatarUrl: setAvatarUrl,\n    avatarFile: avatarFile,\n    setAvatarFile: setAvatarFile,\n    theme: theme,\n    setTheme: setTheme,\n    themeList: themeList,\n    submit: submit,\n    showProfileSidebar: showProfileSidebar,\n    toggleProfileSidebar: toggleProfileSidebar\n  }), __jsx(Frame, {\n    className: \"w-screen\",\n    style: {\n      height: \"calc(100vh - 2.5rem)\"\n    }\n  }, __jsx(\"div\", {\n    dangerouslySetInnerHTML: {\n      __html: template\n    }\n  })));\n};\n\nexport default withRedux(Dashboard);","map":{"version":3,"sources":["/Users/riqi/Projects/persona-app/dashboard/pages/dash.js"],"names":["React","useEffect","useState","Head","Link","useRouter","useDispatch","useSelector","Frame","withRedux","Layout","Meta","Nav","Sidebar","saveAuthData","saveProfileData","blockstackAPI","stringify","anchorme","handlebars","readFileAsBuffer","file","temporaryFileReader","FileReader","resolve","reject","onload","result","readAsArrayBuffer","Dashboard","dispatch","router","name","setName","description","setDescription","avatarUrl","setAvatarUrl","avatarFile","setAvatarFile","accountList","setAccountList","themeList","setThemeList","theme","setTheme","template","setTemplate","authData","state","auth","profile","showProfileSidebar","setShowProfileSidebar","submit","e","preventDefault","newProfile","buff","session","putFile","encrypt","newAvatarUrl","checkAuthData","isUserSignedIn","loadUserData","getAuthData","length","getFile","decrypt","getProfile","parsedProfile","JSON","parse","avatarExist","image","find","img","contentUrl","choosenTheme","replace","fetchThemeList","html","cloneAccountList","cloneTheme","currentData","attributes","value","compiled","compile","toggleProfileSidebar","height","__html"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport Head from 'next/head'\nimport Link from 'next/link'\nimport { useRouter } from 'next/router'\nimport { useDispatch, useSelector } from 'react-redux'\nimport Frame from 'react-frame-component'\n\nimport { withRedux } from '../lib/redux'\nimport Layout from '../components/layout'\nimport Meta from '../components/meta'\nimport Nav from '../components/nav'\nimport Sidebar from '../components/sidebar'\n\nimport { saveAuthData } from '../actions/auth'\nimport { saveProfileData } from '../actions/profile'\nimport { blockstackAPI } from '../api'\nimport stringify from 'fast-json-stable-stringify'\nimport anchorme from 'anchorme'\nimport handlebars from 'handlebars'\n\nconst readFileAsBuffer = (file) => {\n  const temporaryFileReader = new FileReader()\n\n  return new Promise((resolve, reject) => {\n    temporaryFileReader.onload = () => {\n      resolve(temporaryFileReader.result)\n    }\n    temporaryFileReader.readAsArrayBuffer(file)\n  })\n}\n\nconst Dashboard = () => {\n  const dispatch = useDispatch()\n  const router = useRouter()\n  const [name, setName] = useState('')\n  const [description, setDescription] = useState('')\n  const [avatarUrl, setAvatarUrl] = useState('')\n  const [avatarFile, setAvatarFile] = useState('')\n  const [accountList, setAccountList] = useState([])\n  const [themeList, setThemeList] = useState([])\n  const [theme, setTheme] = useState('')\n  const [template, setTemplate] = useState('')\n\n  const authData = useSelector(state => state.auth.authData)\n  const profile = useSelector(state => state.profile)\n\n  const [showProfileSidebar, setShowProfileSidebar] = useState(true)\n\n  const submit = async (e) => {\n    e.preventDefault()\n\n    const newProfile = {\n      name: name,\n      description: description,\n      avatarUrl: avatarUrl,\n      accountList: accountList,\n      theme: theme\n    }\n    if(avatarFile) {\n      const buff = await readFileAsBuffer(avatarFile)\n      const newAvatarUrl = await blockstackAPI.session.putFile('avatar.png', buff, {\n        encrypt: false\n      })\n      newProfile.avatarUrl = newAvatarUrl\n    }\n\n    await blockstackAPI.session.putFile('profile.json', JSON.stringify(newProfile), {\n      encrypt: false\n    })\n\n    dispatch(saveProfileData(newProfile))\n  }\n\n  useEffect(() => {\n\t\tconst checkAuthData = async () => {\n      if(blockstackAPI.session.isUserSignedIn()) {\n        if(!authData) {\n          const getAuthData = await blockstackAPI.session.loadUserData()\n          dispatch(saveAuthData(getAuthData))\n        }\n\n        if(Object.keys(profile).length === 0) {\n          const getProfile = await blockstackAPI.session.getFile('profile.json', {\n            decrypt: false\n          })\n\n          if(getProfile) {\n            const parsedProfile = JSON.parse(getProfile)\n            dispatch(saveProfileData(parsedProfile))\n          }\n          else {\n            // create new user profile\n            const avatarExist = authData.profile.image.find(img => img.name === 'avatar') || {}\n            \n            // set default data\n            let name = authData.profile.name || ''\n            let description = authData.profile.description || ''\n            let avatarUrl = avatarExist.contentUrl || ''\n            let theme = {\n\n            }\n            \n            const newProfile = {\n              name: name,\n              description: description,\n              avatarUrl: avatarUrl,\n              theme: theme,\n              accountList: [],\n            }\n            await blockstackAPI.session.putFile('profile.json', JSON.stringify(newProfile), {\n              encrypt: false\n            })\n\n            dispatch(saveProfileData(newProfile))\n          }\n        }\n\n        const choosenTheme = await blockstackAPI.session.getFile('theme.json', {\n          decrypt: false\n        })\n        if(choosenTheme) {\n          setTheme(JSON.parse(choosenTheme))\n        }\n      }\n      else {\n        router.replace('/login')\n      }\n\t\t}\n    checkAuthData()\n    \n    const fetchThemeList = () => {\n      setThemeList([{\n        name: 'Esox',\n        html: `\n        <style>\n          @import url(\"https://fonts.googleapis.com/css?family=Open+Sans&display=swap\");\n          body {\n            margin: 0;\n          }\n          .container {\n            min-width: 100vw;\n            min-height: 100vh;\n            font-family: \"Open Sans\", sans-serif;\n            color: #282828;\n            display: flex;\n            background: #f8f8f8;\n          }\n          .content {\n            display: flex;\n            max-width: 768px;\n            margin: auto;\n            width: 100%;\n          }\n          .content-img {\n            padding: 0 16px;\n            align-items: center;\n            justify-content: center;\n            display: flex;\n          }\n          .content-text {\n            padding: 0 16px;\n            padding-left: 32px;\n            justify-content: center;\n            display: flex;\n            flex-direction: column;\n          }\n          p.name {\n            font-size: 36px;\n            font-weight: 600;\n            margin: 0;\n            margin-bottom: 16px;\n          }\n          p.description {\n            font-size: 16px;\n            font-weight: 400;\n            margin: 0;\n            margin-bottom: 32px;\n            white-space: pre-wrap;\n            line-height: 1.5;\n          }\n          .avatar {\n            border: solid 3px #282828;\n            border-radius: 50%;\n          }\n          a {\n            color: blue;\n            text-decoration: none;\n          }\n          .social-list {\n            display: flex;\n          }\n          .social {\n            padding-right: 8px;\n          }\n        </style>\n        <div class=\"container\">\n          <div class=\"content\">\n            <div class=\"content-img\">\n              <img class=\"avatar\" height=\"200\" width=\"200\" src={{avatarUrl}} />\n            </div>\n            <div class=\"content-text\">\n              <p class=\"name\">{{name}}</p>\n              <p class=\"description\">{{{description}}}</p>\n              <div class=\"social-list\">\n                {{#each accountList}}\n                  <a class=\"social\" href=\"https://{{service}}.com/{{identifier}}\" target=\"_blank\">\n                    {{service}}\n                  </a>\n                {{/each}}\n              </div>\n            </div>\n          </div>\n        </div>\n        `\n      }, {\n        name: 'Test 2',\n        html: `<html><body>{{name}} 2</body></html>`\n      }, {\n        name: 'Test 3',\n        html: `<html><body>{{name}} 3</body></html>`\n      }])\n    }\n    fetchThemeList()\n  }, [])\n\n  useEffect(() => {\n    if(profile.name) {\n      setName(profile.name)\n    }\n    if(profile.description) {\n      setDescription(profile.description)\n    }\n    if(Array.isArray(profile.accountList)) {\n      const cloneAccountList = JSON.parse(JSON.stringify(profile.accountList))\n      setAccountList(cloneAccountList)\n    }\n    if(profile.avatarUrl) {\n      setAvatarUrl(profile.avatarUrl)\n    }\n    if(profile.theme) {\n      const cloneTheme = JSON.parse(JSON.stringify(profile.theme))\n      setTheme(cloneTheme)\n    }\n  }, [profile])\n\n  useEffect(() => {\n    const currentData = JSON.parse(JSON.stringify({\n      name: name,\n      description: description,\n      avatarUrl: avatarUrl,\n      accountList: accountList\n    }))\n    if(currentData.description) {\n      currentData.description = anchorme(currentData.description, {\n        attributes: [\n          {\n            name:\"target\",\n            value:\"_blank\"\n          }\n        ]\n      })\n    }\n  \n    if(theme) {\n      const compiled = handlebars.compile(theme.html)(currentData)\n      setTemplate(compiled)\n    }\n  }, [theme, name, description, avatarUrl, accountList])\n\n  const toggleProfileSidebar = () => {\n    setShowProfileSidebar(!showProfileSidebar)\n  }\n\n  return (\n    <Layout>\n      <Head>\n        <title>Dashboard | Paras</title>\n        <link rel='icon' href='/favicon.ico' />\n      </Head>\n\n      <Meta />\n\n      <Nav toggleProfileSidebar={toggleProfileSidebar} />\n\n      <Sidebar \n        name={name}\n        setName={setName} \n        description={description}\n        setDescription={setDescription} \n        accountList={accountList}\n        setAccountList={setAccountList}\n        avatarUrl={avatarUrl}\n        setAvatarUrl={setAvatarUrl}\n        avatarFile={avatarFile}\n        setAvatarFile={setAvatarFile}  \n        theme={theme}\n        setTheme={setTheme}\n        themeList={themeList}\n        submit={submit}\n        showProfileSidebar={showProfileSidebar}\n        toggleProfileSidebar={toggleProfileSidebar}\n      />\n\n      <Frame className=\"w-screen\" style={{\n        height: `calc(100vh - 2.5rem)`\n      }}>\n        <div dangerouslySetInnerHTML={{\n          __html: template\n        }}></div>\n      </Frame>\n    </Layout>\n  )\n}\n\nexport default withRedux(Dashboard)"]},"metadata":{},"sourceType":"module"}