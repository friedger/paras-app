{"ast":null,"code":"import _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport * as blockstack from 'blockstack';\nimport axios from 'axios';\nimport uuidv4 from 'uuid/v4';\nimport NodeRSA from 'node-rsa';\nimport stringify from 'fast-json-stable-stringify';\nimport sha256 from 'js-sha256';\n\nvar BlockstackAPI = function BlockstackAPI() {\n  _classCallCheck(this, BlockstackAPI);\n\n  this.appConfig = new blockstack.AppConfig(['email', 'store_write', 'publish_data'], 'http://localhost:4000', '/login');\n  this[\"default\"] = blockstack;\n  this.session = new blockstack.UserSession({\n    appConfig: this.appConfig\n  });\n};\n\nvar _signCredential =\n/*#__PURE__*/\nfunction () {\n  var _ref = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(message, privateKey) {\n    var msg, hashedMsg, key, signedMsg, splitSignedMsg, leftSignedMsg, rightSignedMsg;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            msg = stringify(message);\n            hashedMsg = sha256(msg);\n            key = new NodeRSA(privateKey);\n            signedMsg = key.sign(hashedMsg, 'hex', 'utf8');\n            splitSignedMsg = signedMsg.length / 2;\n            leftSignedMsg = signedMsg.substring(0, splitSignedMsg);\n            rightSignedMsg = signedMsg.substring(splitSignedMsg);\n            return _context.abrupt(\"return\", {\n              left: {\n                hash: leftSignedMsg\n              },\n              right: {\n                hash: rightSignedMsg\n              }\n            });\n\n          case 8:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function _signCredential(_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nvar CredentialAPI =\n/*#__PURE__*/\nfunction () {\n  function CredentialAPI() {\n    _classCallCheck(this, CredentialAPI);\n  }\n\n  _createClass(CredentialAPI, [{\n    key: \"create\",\n    value: function () {\n      var _create = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(credential, privateKey) {\n        var signature, input, res;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.prev = 0;\n                _context2.next = 3;\n                return _signCredential(credential, privateKey);\n\n              case 3:\n                signature = _context2.sent;\n                input = {\n                  version: 'degree/v1',\n                  uid: uuidv4(),\n                  credential: credential,\n                  signature: signature\n                };\n                _context2.next = 7;\n                return axios.post('http://localhost:8080/v1/certificates', input);\n\n              case 7:\n                res = _context2.sent;\n                console.log(res.data);\n                _context2.next = 14;\n                break;\n\n              case 11:\n                _context2.prev = 11;\n                _context2.t0 = _context2[\"catch\"](0);\n                console.log(_context2.t0);\n\n              case 14:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, null, [[0, 11]]);\n      }));\n\n      function create(_x3, _x4) {\n        return _create.apply(this, arguments);\n      }\n\n      return create;\n    }()\n  }]);\n\n  return CredentialAPI;\n}();\n\nexport var blockstackAPI = new BlockstackAPI();\nexport var credentialAPI = new CredentialAPI();","map":{"version":3,"sources":["/Users/riqi/Projects/persona-app/dashboard/api/index.js"],"names":["blockstack","axios","uuidv4","NodeRSA","stringify","sha256","BlockstackAPI","appConfig","AppConfig","session","UserSession","_signCredential","message","privateKey","msg","hashedMsg","key","signedMsg","sign","splitSignedMsg","length","leftSignedMsg","substring","rightSignedMsg","left","hash","right","CredentialAPI","credential","signature","input","version","uid","post","res","console","log","data","blockstackAPI","credentialAPI"],"mappings":";;;;AAAA,OAAO,KAAKA,UAAZ,MAA4B,YAA5B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,SAAnB;AACA,OAAOC,OAAP,MAAoB,UAApB;AACA,OAAOC,SAAP,MAAsB,4BAAtB;AACA,OAAOC,MAAP,MAAmB,WAAnB;;IAEMC,a,GACL,yBAAc;AAAA;;AACb,OAAKC,SAAL,GAAiB,IAAIP,UAAU,CAACQ,SAAf,CAAyB,CAAC,OAAD,EAAU,aAAV,EAAyB,cAAzB,CAAzB,EAAmE,uBAAnE,EAA4F,QAA5F,CAAjB;AACA,oBAAeR,UAAf;AACA,OAAKS,OAAL,GAAe,IAAIT,UAAU,CAACU,WAAf,CAA2B;AACzCH,IAAAA,SAAS,EAAE,KAAKA;AADyB,GAA3B,CAAf;AAGA,C;;AAGF,IAAMI,eAAe;AAAA;AAAA;AAAA;AAAA;AAAA,2BAAG,iBAAOC,OAAP,EAAgBC,UAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AACjBC,YAAAA,GADiB,GACXV,SAAS,CAACQ,OAAD,CADE;AAEjBG,YAAAA,SAFiB,GAELV,MAAM,CAACS,GAAD,CAFD;AAIjBE,YAAAA,GAJiB,GAIX,IAAIb,OAAJ,CAAYU,UAAZ,CAJW;AAKjBI,YAAAA,SALiB,GAKLD,GAAG,CAACE,IAAJ,CAASH,SAAT,EAAoB,KAApB,EAA2B,MAA3B,CALK;AAMjBI,YAAAA,cANiB,GAMAF,SAAS,CAACG,MAAV,GAAiB,CANjB;AAOjBC,YAAAA,aAPiB,GAODJ,SAAS,CAACK,SAAV,CAAoB,CAApB,EAAuBH,cAAvB,CAPC;AAQjBI,YAAAA,cARiB,GAQAN,SAAS,CAACK,SAAV,CAAoBH,cAApB,CARA;AAAA,6CAUhB;AACNK,cAAAA,IAAI,EAAE;AACLC,gBAAAA,IAAI,EAAEJ;AADD,eADA;AAINK,cAAAA,KAAK,EAAE;AACND,gBAAAA,IAAI,EAAEF;AADA;AAJD,aAVgB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAfZ,eAAe;AAAA;AAAA;AAAA,GAArB;;IAwBMgB,a;;;;;;;;;;;;iDACQC,U,EAAYf,U;;;;;;;;uBAECF,eAAe,CAACiB,UAAD,EAAaf,UAAb,C;;;AAAjCgB,gBAAAA,S;AAEAC,gBAAAA,K,GAAQ;AACbC,kBAAAA,OAAO,EAAE,WADI;AAEbC,kBAAAA,GAAG,EAAE9B,MAAM,EAFE;AAGb0B,kBAAAA,UAAU,EAAEA,UAHC;AAIbC,kBAAAA,SAAS,EAAEA;AAJE,iB;;uBAOI5B,KAAK,CAACgC,IAAN,CAAW,uCAAX,EAAoDH,KAApD,C;;;AAAZI,gBAAAA,G;AACNC,gBAAAA,OAAO,CAACC,GAAR,CAAYF,GAAG,CAACG,IAAhB;;;;;;;AAEAF,gBAAAA,OAAO,CAACC,GAAR;;;;;;;;;;;;;;;;;;;;;AAKH,OAAO,IAAME,aAAa,GAAG,IAAIhC,aAAJ,EAAtB;AACP,OAAO,IAAMiC,aAAa,GAAG,IAAIZ,aAAJ,EAAtB","sourcesContent":["import * as blockstack from 'blockstack'\nimport axios from 'axios'\nimport uuidv4 from 'uuid/v4'\nimport NodeRSA from 'node-rsa'\nimport stringify from 'fast-json-stable-stringify'\nimport sha256 from 'js-sha256'\n\nclass BlockstackAPI {\n\tconstructor() {\n\t\tthis.appConfig = new blockstack.AppConfig(['email', 'store_write', 'publish_data'], 'http://localhost:4000', '/login')\n\t\tthis.default = blockstack\n\t\tthis.session = new blockstack.UserSession({\n\t\t\tappConfig: this.appConfig\n\t\t})\n\t}\n}\n\nconst _signCredential = async (message, privateKey) => {\n\tconst msg = stringify(message)\n\tconst hashedMsg = sha256(msg)\n\n\tconst key = new NodeRSA(privateKey)\n\tconst signedMsg = key.sign(hashedMsg, 'hex', 'utf8')\n\tconst splitSignedMsg = signedMsg.length/2\n\tconst leftSignedMsg = signedMsg.substring(0, splitSignedMsg)\n\tconst rightSignedMsg = signedMsg.substring(splitSignedMsg)\n\t\n\treturn {\n\t\tleft: {\n\t\t\thash: leftSignedMsg\n\t\t},\n\t\tright: {\n\t\t\thash: rightSignedMsg\n\t\t}\n\t}\n\n\t// const publicKey = new NodeRSA(currentOrg.publicKey)\n\t// const verify = publicKey.verify(hashedMsg, leftSignedMsg + rightSignedMsg, 'utf8', 'hex')\n\t// console.log(verify)\n}\n\nclass CredentialAPI {\n\tasync create(credential, privateKey) {\n\t\ttry {\n\t\t\tconst signature = await _signCredential(credential, privateKey)\n\n\t\t\tconst input = {\n\t\t\t\tversion: 'degree/v1',\n\t\t\t\tuid: uuidv4(),\n\t\t\t\tcredential: credential,\n\t\t\t\tsignature: signature\n\t\t\t}\n\n\t\t\tconst res = await axios.post('http://localhost:8080/v1/certificates', input)\n\t\t\tconsole.log(res.data)\t\n\t\t} catch (err) {\n\t\t\tconsole.log(err)\n\t\t}\n\t}\n}\n\nexport const blockstackAPI = new BlockstackAPI()\nexport const credentialAPI = new CredentialAPI()"]},"metadata":{},"sourceType":"module"}