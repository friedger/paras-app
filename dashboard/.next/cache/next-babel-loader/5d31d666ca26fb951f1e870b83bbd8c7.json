{"ast":null,"code":"import _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nimport _Array$isArray from \"@babel/runtime-corejs2/core-js/array/is-array\";\nimport _Promise from \"@babel/runtime-corejs2/core-js/promise\";\nvar __jsx = React.createElement;\nimport React, { useEffect, useState } from 'react';\nimport Head from 'next/head';\nimport { useRouter } from 'next/router';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Frame from 'react-frame-component';\nimport { withRedux } from '../lib/redux';\nimport Layout from '../components/layout';\nimport Meta from '../components/meta';\nimport Nav from '../components/nav';\nimport Sidebar from '../components/sidebar';\nimport LoggedIn from '../components/loggedIn';\nimport Onboarding from '../components/onboarding';\nimport Loading from '../components/loading';\nimport { saveAuthData, saveUserId } from '../actions/auth';\nimport { saveProfileData } from '../actions/profile';\nimport { blockstackAPI, IdentifierAPI, themeAPI } from '../api';\nimport anchorme from 'anchorme';\nimport handlebars from 'handlebars';\n\nconst readFileAsBuffer = file => {\n  const temporaryFileReader = new FileReader();\n  return new _Promise((resolve, reject) => {\n    temporaryFileReader.onload = () => {\n      resolve(temporaryFileReader.result);\n    };\n\n    temporaryFileReader.readAsArrayBuffer(file);\n  });\n};\n\nconst Dashboard = () => {\n  const dispatch = useDispatch();\n  const router = useRouter();\n  const {\n    0: name,\n    1: setName\n  } = useState('');\n  const {\n    0: description,\n    1: setDescription\n  } = useState('');\n  const {\n    0: avatarUrl,\n    1: setAvatarUrl\n  } = useState('');\n  const {\n    0: avatarFile,\n    1: setAvatarFile\n  } = useState('');\n  const {\n    0: accountList,\n    1: setAccountList\n  } = useState([]);\n  const {\n    0: themeList,\n    1: setThemeList\n  } = useState([]);\n  const {\n    0: theme,\n    1: setTheme\n  } = useState('');\n  const {\n    0: identifier,\n    1: setIdentifier\n  } = useState('');\n  const {\n    0: template,\n    1: setTemplate\n  } = useState('');\n  const {\n    0: submitState,\n    1: setSubmitState\n  } = useState('');\n  const {\n    0: loadingState,\n    1: setLoadingState\n  } = useState(true);\n  const authData = useSelector(state => state.auth.authData);\n  const profile = useSelector(state => state.profile);\n  const {\n    0: showProfileSidebar,\n    1: setShowProfileSidebar\n  } = useState(false);\n  const {\n    0: showOnboarding,\n    1: setShowOnboarding\n  } = useState(true);\n\n  const logout = async () => {\n    await blockstackAPI.session.signUserOut();\n    dispatch(saveAuthData(null));\n  };\n\n  const submit = async (e, onboarding) => {\n    e.preventDefault();\n    setSubmitState('pending');\n\n    try {\n      const newProfile = {\n        name: name,\n        description: description,\n        avatarUrl: avatarUrl,\n        accountList: accountList,\n        theme: theme\n      };\n\n      if (avatarFile) {\n        const buff = await readFileAsBuffer(avatarFile);\n        const newAvatarUrl = await blockstackAPI.session.putFile('avatar.png', buff, {\n          encrypt: false\n        });\n        newProfile.avatarUrl = newAvatarUrl;\n      }\n\n      if (onboarding) {\n        const newData = {\n          identifier: identifier,\n          blockstackId: authData.username,\n          profile: newProfile\n        };\n        const newId = new IdentifierAPI(newData);\n        await newId.save();\n      } else {\n        const newId = await IdentifierAPI.findOne({\n          identifier: identifier\n        });\n        newId.update({\n          profile: newProfile\n        });\n        await newId.save();\n      }\n\n      dispatch(saveProfileData(newProfile));\n      setSubmitState('fulfilled');\n    } catch (err) {\n      setSubmitState('rejected');\n    }\n\n    setTimeout(() => {\n      setSubmitState('');\n    }, 1000);\n  };\n\n  useEffect(() => {\n    const checkAuthData = async () => {\n      if (blockstackAPI.session.isUserSignedIn()) {\n        if (!authData) {\n          const getAuthData = await blockstackAPI.session.loadUserData();\n          dispatch(saveAuthData(getAuthData));\n        }\n\n        const id = await IdentifierAPI.findOne({\n          identifier: identifier\n        });\n\n        if (id) {\n          setShowOnboarding(false);\n          dispatch(saveProfileData(id.attrs.profile));\n          dispatch(saveUserId(id.attrs.identifier));\n        }\n\n        setTimeout(() => {\n          setLoadingState(false);\n        }, 500);\n      } else {\n        router.replace('/login');\n      }\n    };\n\n    checkAuthData();\n\n    const fetchThemeList = async () => {\n      const response = await themeAPI.fetch();\n      setThemeList(response.data.data);\n    };\n\n    fetchThemeList();\n  }, []);\n  useEffect(() => {\n    if (profile.name) {\n      setName(profile.name);\n    }\n\n    if (profile.description) {\n      setDescription(profile.description);\n    }\n\n    if (_Array$isArray(profile.accountList)) {\n      const cloneAccountList = JSON.parse(_JSON$stringify(profile.accountList));\n      setAccountList(cloneAccountList);\n    }\n\n    if (profile.avatarUrl) {\n      setAvatarUrl(profile.avatarUrl);\n    }\n\n    if (profile.theme) {\n      const cloneTheme = JSON.parse(_JSON$stringify(profile.theme));\n      setTheme(cloneTheme);\n    }\n  }, [profile]);\n  useEffect(() => {\n    const currentData = JSON.parse(_JSON$stringify({\n      name: name,\n      description: description,\n      avatarUrl: avatarUrl,\n      accountList: accountList\n    }));\n\n    if (currentData.description) {\n      currentData.description = anchorme(currentData.description, {\n        attributes: [{\n          name: \"target\",\n          value: \"_blank\"\n        }]\n      });\n    }\n\n    if (theme) {\n      const path = 'index';\n      const page = theme.templatePage.find(page => page.path === path);\n      const compiled = handlebars.compile(page.template || '')(currentData);\n      setTemplate(compiled);\n    }\n  }, [theme, name, description, avatarUrl, accountList]);\n\n  const toggleProfileSidebar = () => {\n    setShowProfileSidebar(!showProfileSidebar);\n  };\n\n  return __jsx(Layout, null, __jsx(Head, null, __jsx(\"title\", null, \"Dashboard | Paras\"), __jsx(\"link\", {\n    rel: \"icon\",\n    href: \"/favicon.ico\"\n  })), __jsx(Meta, null), __jsx(LoggedIn, null), loadingState && __jsx(Loading, null), __jsx(Nav, {\n    toggleProfileSidebar: toggleProfileSidebar\n  }), showOnboarding && __jsx(Onboarding, {\n    identifier: identifier,\n    setIdentifer: setIdentifier,\n    name: name,\n    setName: setName,\n    description: description,\n    setDescription: setDescription,\n    accountList: accountList,\n    setAccountList: setAccountList,\n    avatarUrl: avatarUrl,\n    setAvatarUrl: setAvatarUrl,\n    avatarFile: avatarFile,\n    setAvatarFile: setAvatarFile,\n    theme: theme,\n    setTheme: setTheme,\n    themeList: themeList,\n    submit: submit,\n    submitState: submitState,\n    showOnboarding: showOnboarding,\n    setShowOnboarding: setShowOnboarding\n  }), __jsx(Sidebar, {\n    name: name,\n    setName: setName,\n    description: description,\n    setDescription: setDescription,\n    accountList: accountList,\n    setAccountList: setAccountList,\n    avatarUrl: avatarUrl,\n    setAvatarUrl: setAvatarUrl,\n    avatarFile: avatarFile,\n    setAvatarFile: setAvatarFile,\n    theme: theme,\n    setTheme: setTheme,\n    themeList: themeList,\n    submit: submit,\n    submitState: submitState,\n    showProfileSidebar: showProfileSidebar,\n    toggleProfileSidebar: toggleProfileSidebar,\n    logout: logout\n  }), __jsx(Frame, {\n    className: \"w-screen\",\n    style: {\n      height: `calc(100vh - 2.5rem)`\n    }\n  }, __jsx(\"div\", {\n    dangerouslySetInnerHTML: {\n      __html: template\n    }\n  })));\n};\n\nexport default withRedux(Dashboard);","map":null,"metadata":{},"sourceType":"module"}