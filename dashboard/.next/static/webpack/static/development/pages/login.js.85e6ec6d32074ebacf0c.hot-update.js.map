{"version":3,"file":"static/webpack/static/development/pages/login.js.85e6ec6d32074ebacf0c.hot-update.js","sources":["webpack:///./pages/login.js"],"sourcesContent":["import React, { useEffect, useState } from 'react'\nimport { useDispatch } from 'react-redux'\nimport Head from 'next/head'\nimport { useRouter } from 'next/router'\n\nimport { withRedux } from '../lib/redux'\nimport { saveAuthData } from '../actions/auth'\nimport { blockstackAPI } from '../api'\nimport { User } from 'radiks'\n\nimport Layout from '../components/layout'\nimport Login from '../components/login'\nimport LandingNav from '../components/landingNav'\n\nconst LoginPage = () => {\n  const dispatch = useDispatch()\n  const router = useRouter()\n  const [loginState, setLoginState] = useState('')\n\t\n\tuseEffect(() => {\n\t\tconst checkAuthData = async () => {\n      if(blockstackAPI.session.isUserSignedIn()) {\n        setLoginState('pending')\n        const authData = blockstackAPI.session.loadUserData()\n        await User.createWithCurrentUser()\n        dispatch(saveAuthData(authData))\n        router.push('/dash')\n      }\n\t\t\telse if(blockstackAPI.session.isSignInPending()) {\n        setLoginState('pending')\n        const authData = await blockstackAPI.session.handlePendingSignIn()\n        await User.createWithCurrentUser()\n        dispatch(saveAuthData(authData))\n        router.push('/dash')\n\t\t\t}\n\t\t}\n\t\tcheckAuthData()\n  }, [])\n  \n  return (\n    <Layout>\n      <Head>\n        <title>Login | Paras</title>\n      </Head>\n\n      <LandingNav />\n      <Login loginState={loginState} />\n    </Layout>\n  )\n}\n\nexport default withRedux(LoginPage)\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAAA;AAAA;AACA;AAIA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAHA;AAAA;AACA;AADA;AAKA;AACA;AANA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AACA;AAQA;AATA;AAAA;AACA;AADA;AAUA;AAVA;AAAA;AACA;AADA;AAYA;AACA;AACA;AAdA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAeA;AACA;AAEA;AAOA;AAAA;AAGA;AACA;AACA;;;;A","sourceRoot":""}