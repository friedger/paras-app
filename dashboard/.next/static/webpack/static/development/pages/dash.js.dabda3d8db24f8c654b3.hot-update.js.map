{"version":3,"file":"static/webpack/static/development/pages/dash.js.dabda3d8db24f8c654b3.hot-update.js","sources":["webpack:///./pages/dash.js"],"sourcesContent":["import React, { useEffect, useState } from 'react'\nimport Head from 'next/head'\nimport { useRouter } from 'next/router'\nimport { useDispatch, useSelector } from 'react-redux'\nimport Frame from 'react-frame-component'\n\nimport { withRedux } from '../lib/redux'\nimport Layout from '../components/layout'\nimport Nav from '../components/nav'\nimport Sidebar from '../components/sidebar'\nimport LoggedIn from '../components/loggedIn'\nimport Onboarding from '../components/onboarding'\nimport Loading from '../components/loading'\n\nimport { saveAuthData, saveUserId } from '../actions/auth'\nimport { saveProfileData } from '../actions/profile'\nimport { blockstackAPI, IdentifierAPI, themeAPI } from '../api'\nimport anchorme from 'anchorme'\nimport handlebars from 'handlebars'\n\nconst readFileAsBuffer = (file) => {\n  const temporaryFileReader = new FileReader()\n\n  return new Promise((resolve, reject) => {\n    temporaryFileReader.onload = () => {\n      resolve(temporaryFileReader.result)\n    }\n    temporaryFileReader.readAsArrayBuffer(file)\n  })\n}\n\nconst Dashboard = () => {\n  const dispatch = useDispatch()\n  const router = useRouter()\n  const [name, setName] = useState('')\n  const [description, setDescription] = useState('')\n  const [avatarUrl, setAvatarUrl] = useState('')\n  const [avatarFile, setAvatarFile] = useState('')\n  const [accountList, setAccountList] = useState([])\n  const [themeList, setThemeList] = useState([])\n  const [theme, setTheme] = useState('')\n  const [identifier, setIdentifier] = useState('')\n  const [template, setTemplate] = useState('')\n  const [submitState, setSubmitState] = useState('')\n  const [loadingState, setLoadingState] = useState(true)\n\n  const authData = useSelector(state => state.auth.authData)\n  const profile = useSelector(state => state.profile)\n\n  const [showProfileSidebar, setShowProfileSidebar] = useState(false)\n  const [showOnboarding, setShowOnboarding] = useState(true)\n\n  const logout = async () => {\n    await blockstackAPI.session.signUserOut()\n    dispatch(saveAuthData(null))\n  }\n\n  const submit = async (e, onboarding) => {\n    e.preventDefault()\n\n    setSubmitState('pending')\n\n    try {\n      const newProfile = {\n        name: name,\n        description: description,\n        avatarUrl: avatarUrl,\n        accountList: accountList,\n        theme: theme\n      }\n      if(avatarFile) {\n        const buff = await readFileAsBuffer(avatarFile)\n        const newAvatarUrl = await blockstackAPI.session.putFile('avatar.png', buff, {\n          encrypt: false\n        })\n        newProfile.avatarUrl = newAvatarUrl\n      }\n\n      if(onboarding) {\n        const newData = {\n          identifier: identifier,\n          blockstackId: authData.username,\n          profile: newProfile\n        }\n        const newId = new IdentifierAPI(newData)\n        await newId.save()\n        dispatch(saveUserId(identifier))\n      }\n      else {\n        const newId = await IdentifierAPI.findOne({\n          identifier: identifier\n        })\n        newId.update({\n          profile: newProfile\n        })\n        await newId.save()\n      }\n  \n      dispatch(saveProfileData(newProfile))\n      setSubmitState('fulfilled')\n    } catch (err) {\n      setSubmitState('rejected')\n    }\n    setTimeout(() => {\n      setSubmitState('')\n    }, 1000)\n  }\n\n  useEffect(() => {\n\t\tconst checkAuthData = async () => {\n      if(blockstackAPI.session.isUserSignedIn()) {\n        if(!authData) {\n          const getAuthData = await blockstackAPI.session.loadUserData()\n          dispatch(saveAuthData(getAuthData))\n        }\n\n        const id = await IdentifierAPI.findOne({\n          identifier: identifier\n        })\n    \n        if(id) {\n          setShowOnboarding(false)\n          dispatch(saveProfileData(id.attrs.profile))\n          dispatch(saveUserId(id.attrs.identifier))\n        }\n        setTimeout(() => {\n          setLoadingState(false)\n        }, 500)\n      }\n      else {\n        router.replace('/login')\n      }\n\t\t}\n    checkAuthData()\n    \n    const fetchThemeList = async () => {\n      const response = await themeAPI.fetch()\n      setThemeList(response.data.data)\n    }\n    fetchThemeList()\n  }, [])\n\n  useEffect(() => {\n    if(profile.name) {\n      setName(profile.name)\n    }\n    if(profile.description) {\n      setDescription(profile.description)\n    }\n    if(Array.isArray(profile.accountList)) {\n      const cloneAccountList = JSON.parse(JSON.stringify(profile.accountList))\n      setAccountList(cloneAccountList)\n    }\n    if(profile.avatarUrl) {\n      setAvatarUrl(profile.avatarUrl)\n    }\n    if(profile.theme) {\n      const cloneTheme = JSON.parse(JSON.stringify(profile.theme))\n      setTheme(cloneTheme)\n    }\n  }, [profile])\n\n  useEffect(() => {\n    const currentData = JSON.parse(JSON.stringify({\n      name: name,\n      description: description,\n      avatarUrl: avatarUrl,\n      accountList: accountList\n    }))\n    if(currentData.description) {\n      currentData.description = anchorme(currentData.description, {\n        attributes: [\n          {\n            name:\"target\",\n            value:\"_blank\"\n          }\n        ]\n      })\n    }\n  \n    if(theme) {\n      const path = 'index'\n      const page = theme.templatePage.find(page => page.path === path)\n      const compiled = handlebars.compile(page.template || '')(currentData)\n      setTemplate(compiled)\n    }\n  }, [theme, name, description, avatarUrl, accountList])\n\n  const toggleProfileSidebar = () => {\n    setShowProfileSidebar(!showProfileSidebar)\n  }\n\n  return (\n    <Layout>\n      <Head>\n        <title>Dashboard | Paras</title>\n        <link rel='icon' href='/favicon.ico' />\n      </Head>\n\n      <LoggedIn />\n      {\n        loadingState && (\n          <Loading />\n        )\n      }\n\n      <Nav toggleProfileSidebar={toggleProfileSidebar} />\n\n      {\n        showOnboarding && (\n          <Onboarding\n            identifier={identifier}\n            setIdentifer={setIdentifier}\n            name={name}\n            setName={setName} \n            description={description}\n            setDescription={setDescription} \n            accountList={accountList}\n            setAccountList={setAccountList}\n            avatarUrl={avatarUrl}\n            setAvatarUrl={setAvatarUrl}\n            avatarFile={avatarFile}\n            setAvatarFile={setAvatarFile}  \n            theme={theme}\n            setTheme={setTheme}\n            themeList={themeList}\n            submit={submit}\n            submitState={submitState}\n            showOnboarding={showOnboarding}\n            setShowOnboarding={setShowOnboarding}\n          />\n        )\n      }\n\n      <Sidebar \n        name={name}\n        setName={setName} \n        description={description}\n        setDescription={setDescription} \n        accountList={accountList}\n        setAccountList={setAccountList}\n        avatarUrl={avatarUrl}\n        setAvatarUrl={setAvatarUrl}\n        avatarFile={avatarFile}\n        setAvatarFile={setAvatarFile}  \n        theme={theme}\n        setTheme={setTheme}\n        themeList={themeList}\n        submit={submit}\n        submitState={submitState}\n        showProfileSidebar={showProfileSidebar}\n        toggleProfileSidebar={toggleProfileSidebar}\n        logout={logout}\n      />\n\n      <Frame className=\"w-screen\" style={{\n        height: `calc(100vh - 2.5rem)`\n      }}>\n        <div dangerouslySetInnerHTML={{\n          __html: template\n        }}></div>\n      </Frame>\n    </Layout>\n  )\n}\n\nexport default withRedux(Dashboard)"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AAcA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAjBA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AAoBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAEA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAEA;AAHA;AAMA;AACA;AACA;AACA;AACA;AACA;AALA;AACA;AAPA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAcA;AAdA;AAAA;AAgBA;AADA;AACA;AAhBA;AAeA;AAGA;AACA;AAnBA;AAAA;AAAA;AAAA;AAAA;AACA;AAqBA;AACA;AACA;AACA;AAHA;AAKA;AA3BA;AAAA;AACA;AADA;AA6BA;AA7BA;AAAA;AACA;AADA;AAAA;AAAA;AAiCA;AADA;AACA;AAjCA;AAgCA;AACA;AAEA;AACA;AADA;AACA;AApCA;AAAA;AACA;AADA;AAyCA;AACA;AA1CA;AAAA;AACA;AADA;AAAA;AAAA;AA4CA;AACA;AA7CA;AA8CA;AACA;AACA;AACA;AAjDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAkDA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAGA;AACA;AACA;AALA;AAAA;AAAA;AAQA;AADA;AACA;AARA;AAOA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAlBA;AAAA;AACA;AADA;AAqBA;AACA;AAtBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAunBA;AAyBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAlBA;AAqBA;AAAA;AACA;AADA;AAAA;AAGA;AACA;AADA;AAAA;AAMA;AACA;AACA;;;;A","sourceRoot":""}